#!/usr/bin/python
import sys, os, re, string, subprocess, shutil, getpass

def main():
    clangExec = 'clang'
    retCode = 0
    # gold = '/usr/local/lib/LLVMgold.so'
    prDebug=False # output to std err
    mkdirFlag=True # really make dirs, not just print
    realBuild=True # really build, not just print
    optRun=False # use opt
    goldRun=False # use .bc files with gold plug-in
    
    if (sys.argv[1] == "-prDebug"):
        sys.argv[1] = ""
        prDebug = True
    
    # Pick the correct clang....
    if ('++' in sys.argv[0]):
        clangExec = 'clang++'
        
    # make args a sing string
    cmdLine = string.join(sys.argv[1:], ' ')


    # TODO make portable; raw compile configure
    if ( bool(re.search(r'conftest\.?[ocC]*\s?',cmdLine)) or #conf exempt
         #bool(re.search(r'workspace/[^/]+$',os.getcwd())) or # configure fix 
         bool(re.search(r'[\w]*\.[sS]\b',cmdLine)) # skip .s files for now TODO find way to cache
        ):
        if realBuild: 
            process = subprocess.Popen([clangExec] + cmdLine.split())
            retCode = process.wait()
            if (retCode != 0):
                sys.stderr.write( 'Error: "Exclusion Build" failed' +'\n')
            sys.exit(retCode)


    # find output file
    outFile = string.join(re.findall(r'-o [^ ]*\.(?:o|do|lo|to|lto|tdo|ltdo)', cmdLine))
    if outFile == '' :
        for i,item in enumerate(sys.argv):
            if item == '-c':
                outFile = re.sub(r'\.[cC]+[pPxX+]*','.o',sys.argv[i+1])

    if prDebug: sys.stderr.write( 'outFile: ' + str(outFile) +'\n')
    
    # trim output file string & get full, real path to object
    hasOut = False
    for i,item in enumerate(sys.argv):
        if item == '-o':
            hasOut = True

    if hasOut:
        objFile = os.path.realpath(re.sub(r'-o (?P<OUT>[^ ]*)\.(?P<EXT>[^ ]*)',r'\g<OUT>.\g<EXT>',outFile))
    else:
        objFile = os.path.realpath(outFile)

    # change extension to .bc
    if prDebug: sys.stderr.write( 'objFile: ' + objFile +'\n')
    
    bcFile = re.sub(r'\.(?:o|do|lo|to|lto|tdo|ltdo)','.bc',objFile)
    bcFile = re.sub(r'/home/'+getpass.getuser()+r'/workspace/','/home/'+getpass.getuser()+r'/workspace/bcache/',bcFile)
    if prDebug: sys.stderr.write( 'bcFile: ' + bcFile +'\n')
    
    # make path to file if needed
    fileDir = os.path.dirname(bcFile)
    if fileDir != '':
        if (not os.path.isdir(fileDir)):
            if mkdirFlag: 
                try: 
                    os.makedirs(fileDir)
                except: 
                    pass
            else: sys.stderr.write ('mkdir file\'s dir: '+fileDir +'\n')
            

    if (outFile != ''):
        # use cached copies if available
        if (not os.path.isfile(bcFile) ):
            
            if prDebug: sys.stderr.write ("=== Build BC ===" +'\n')
            
            buildBC = cmdLine
            #remove -Xclang flags because they are not needed at this step?
#            buildBC = re.sub(r'-Xclang -[^ ]*','',buildBC) 
            # use .bc to build objects; build tmp if going to opt
            if (optRun):
                buildBC = re.sub(r'-o [^ ]*\.(?:o|do|lo|to|lto|tdo|ltdo)',r'-o '+bcFile+".tmp", buildBC) 
            else:
                if hasOut:
                    buildBC = re.sub(r'-o [^ ]*\.(o|do|lo|to|lto|tdo|ltdo)',r'-o '+bcFile, buildBC)
                else:
                    buildBC += " -o " + bcFile
            
            buildBC += " -emit-llvm"
            
            if prDebug: sys.stderr.write( string.join([clangExec] + buildBC.split(), ' ') +'\n')
            if realBuild: 
                process = subprocess.Popen([clangExec] + buildBC.split())
                retCode = process.wait()
                if (retCode != 0):
                    sys.stderr.write( 'Error: "Build BC" failed' +'\n')

            
            if realBuild and optRun:
                process = subprocess.Popen("opt -std-compile-opts < " +bcFile+".tmp > "+ bcFile, shell=True)
                retCode = process.wait()
                if (retCode != 0):
                    sys.stderr.write( 'Error: "Opt BC" failed' +'\n')
                    
        if (retCode == 0):
            # ar cant make usable archives from bitcode...
            if (goldRun):
                shutil.copy(bcFile, objFile)
            else:
                if prDebug: sys.stderr.write ("=== Build Ob ===" +'\n')
            
                # use bitcode to build object
                #CHECK
                buildOb = re.sub('[^ ]*/?[^ /]*\.(?:[cC]+[pPxX+]*|[sS][^o])', bcFile , cmdLine) #TODO better replacement for sources; handle .s/.S but not .so
#                 buildOb = re.sub(r'[^ ]*/?(?P<OUT>[^ /]*)\.[cC]+[pPxX+]*', bcFile, cmdLine)
                # buildOb += " -use-gold-plugin"
                #TEMP DISABLE#buildOb += " -Xclang -just-codegen"
            
                if prDebug: sys.stderr.write( string.join([clangExec] + buildOb.split(),' ') +'\n')
                if realBuild: 
                    process = subprocess.Popen([clangExec] + buildOb.split())
                    retCode = process.wait()
           
        
        if (retCode != 0):
            sys.stderr.write ("=== Fail Build Attempt ===" +'\n')
            
            if prDebug: sys.stderr.write ( string.join([clangExec] +  cmdLine.split(),' ') +'\n')
            if realBuild: 
                process = subprocess.Popen([clangExec] +  cmdLine.split())
                retCode = process.wait()
                if (retCode != 0):
                    sys.stderr.write ('Error: "Fail Build Attempt" failed')
#                    sys.exit(retCode)
        
    else:
        if prDebug: sys.stderr.write ("=== Build Binary ===" +'\n')
        
        buildBin = cmdLine
        # buildBin += " -use-gold-plugin"
        
        if prDebug: sys.stderr.write( string.join([clangExec] +  buildBin.split(),' ') +'\n')
        if realBuild: 
            process = subprocess.Popen([clangExec] +  buildBin.split())
            retCode = process.wait()
            if (retCode != 0):
                sys.stderr.write ('Error: "Build" failed' +'\n')
                sys.exit(retCode)

    sys.exit(retCode)


if __name__ == "__main__":
    main()
